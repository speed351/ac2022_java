[33mcommit 56efc59616b9a481a42f464e9b2ed0cb3c27e163[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: park <zpzp351@naver.com>
Date:   Tue Oct 25 11:08:03 2022 +0900

    Step01_DataType added

[1mdiff --git a/Step01_DataType/src/test/main/MainClass01.java b/Step01_DataType/src/test/main/MainClass01.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9f9aced[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass01.java[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32mpackage test.main;[m
[32m+[m[32m/*[m
[32m+[m[32m *  [ Java 기본 데이터 type ][m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  1. 숫자형[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  정수형 : byte, short, int, long[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  - byte 변수명;  // -128 ~ 127[m
[32m+[m[32m *  - short 변수명;  // -32768 ~ 32767[m
[32m+[m[32m *  - int  변수명; // -2,147,483,648 ~ 2,147,483,647[m
[32m+[m[32m *  - long 변수명; // -9223372036854775808 ~ 9,223,372,036,854,775,807[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  실수형 : float, double[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  - float 변수명; // 1.40129846432481707e-45 ~ 3.40282346638528860e+38[m
[32m+[m[32m *  - double 변수명; //4.94065645841246544e-324d ~ 1.79769313486231570e+308d[m
[32m+[m[32m */[m
[32m+[m[32mpublic class MainClass01 {[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSystem.out.println("main 메소드가 시작 되었습니다.");[m
[32m+[m[41m		[m
[32m+[m		[32mbyte iByte =10;[m
[32m+[m		[32mshort iShort=10;[m
[32m+[m		[32mint iInt=10000;[m
[32m+[m		[32mlong ilong=10;[m
[32m+[m[41m		[m
[32m+[m		[32mint tmp = iShort;[m
[32m+[m		[32mbyte tmp2 = (byte)iShort; // casting 형변환[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m		[32mfloat num1 = 10.1f;[m
[32m+[m		[32mdouble num2 = 10.2d;[m
[32m+[m		[32mdouble num3 = 10.3; // d, f를 붙이지 않으면 double type으로 간주된다.[m
[32m+[m[41m		[m
[32m+[m		[32m//float type에 있는 값을 double type에 담기[m
[32m+[m		[32mdouble tmp3 = num1;[m
[32m+[m[41m		[m
[32m+[m		[32mfloat tmp4 = (float)num2;	// casting 필요[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m		[32mSystem.out.println("메소드를 종료합니다");[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/Step01_DataType/src/test/main/MainClass02.java b/Step01_DataType/src/test/main/MainClass02.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f9a3c68[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass02.java[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32mpackage test.main;[m
[32m+[m
[32m+[m[32mpublic class MainClass02 {[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSystem.out.println("main 메소드가 시작되었습니다.");[m
[32m+[m[41m		[m
[32m+[m		[32m// 국어 점수[m
[32m+[m		[32mint kor = 95;[m
[32m+[m		[32m// 영어 점수[m
[32m+[m		[32mint eng = 100;[m
[32m+[m		[32m// 수학 점수[m
[32m+[m[41m		[m
[32m+[m		[32m// 국어 점수와 영어 점수의 평균을 구해서 변수에 담고 그 결과를 콘솔창에 출력해보세요.[m
[32m+[m		[32mfloat avg = (kor + eng)/2.f;[m
[32m+[m[41m		[m
[32m+[m		[32mSystem.out.println(avg);[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/Step01_DataType/src/test/main/MainClass03.java b/Step01_DataType/src/test/main/MainClass03.java[m
[1mnew file mode 100644[m
[1mindex 0000000..561e9d6[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass03.java[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32mpackage test.main;[m
[32m+[m[32m/*[m
[32m+[m[32m *  [java 기본 데이터 type][m
[32m+[m[32m *  2. 논리형 (boolean)[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m *  - true, false 두가지 값 중 하나이다.[m
[32m+[m[32m *  - true, false를 직접 쓰거나 비교연산 혹은 논리 연산의 결과로 얻어낼 수 있다.[m
[32m+[m[32m *  - 참과 거짓을 나타내는 데이터 type[m
[32m+[m[32m */[m
[32m+[m[32mpublic class MainClass03 {[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32m//논리형 변수 선언과 동시에 값 대입하기[m
[32m+[m		[32mboolean isRun = true;[m
[32m+[m[41m		[m
[32m+[m		[32mif(isRun) {[m
[32m+[m			[32mSystem.out.println("달려요");[m
[32m+[m		[32m}[m
[32m+[m[41m		[m
[32m+[m		[32mboolean isGreater=10>1;[m
[32m+[m		[32mboolean result =true||false;[m
[32m+[m[41m		[m
[32m+[m		[32m//한번 선언한 변수는 다시 선언할 수 없다.[m
[32m+[m		[32m//boolean result = false;[m
[32m+[m		[32mresult = false;	//변수에 다른 값을 대입할 수 있다.(동일한 type인 경우)[m
[32m+[m		[32m//다른 type 값은 변수에 담을 수 없다.[m
[32m+[m		[32m//result=10;[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/Step01_DataType/src/test/main/MainClass04.java b/Step01_DataType/src/test/main/MainClass04.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7ff742b[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass04.java[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32mpackage test.main;[m
[32m+[m[32m/*[m
[32m+[m[32m * 2.문자형(char)[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * - 65536가지 코드 값을 가질 수 있다.[m
[32m+[m[32m * - 전 세계에서 사용하는 모든 문자 1글자를 표현할 수 있다.[m
[32m+[m[32m * - single quotation을 이용해서 만든다.[m
[32m+[m[32m */[m
[32m+[m[32mpublic class MainClass04 {[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mchar ch1 = 'a';[m
[32m+[m		[32mchar ch2 = 'b';[m
[32m+[m		[32mchar ch3 = 'c';[m
[32m+[m		[32mchar ch4 = '가';[m
[32m+[m		[32mchar ch5 = '나';[m
[32m+[m		[32mchar ch6 = '다';[m
[32m+[m		[32mchar ch7 = '@';[m
[32m+[m[41m		[m
[32m+[m		[32m// 정수 값에 1:1 대응되는 char 값이 존재한다.[m
[32m+[m		[32mint code1 = ch1;[m
[32m+[m		[32mint code2 = ch2;[m
[32m+[m		[32mint code3 = ch3;[m
[32m+[m		[32mint code4 = ch4;[m
[32m+[m		[32mint code5 = ch5;[m
[32m+[m		[32mint code6 = ch6;[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/Step01_DataType/src/test/main/MainClass05.java b/Step01_DataType/src/test/main/MainClass05.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b91fd68[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass05.java[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32mpackage test.main;[m
[32m+[m[32m/*[m
[32m+[m[32m * [JAVA 참조 데이터 type][m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * String type[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * - 문자열을 다룰 때 사용하는 데이터 type이다.[m
[32m+[m[32m */[m
[32m+[m[32mpublic class MainClass05 {[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32m// "kim"이라는 String type 객체를 heap 영역(사물함)에 만들고 그 참조값을 변수에 담기[m
[32m+[m		[32mString name="kim";[m
[32m+[m		[32m// name 안에 있는 참조값을 tmp 변수에 복사해주기[m
[32m+[m		[32mString tmp=name;[m
[32m+[m		[32m//"lee"라는 String type 객체를 heap 영역에 만들고 그 참조값을 name 변수에 덮어쓰기[m
[32m+[m		[32mname="lee";[m
[32m+[m		[32m//name 변수를 비우기 (null은 참조 데이터 type이 담길 수 있는 빈공간을 의미한다.)[m
[32m+[m		[32mname=null;[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/Step01_DataType/src/test/main/MainClass06.java b/Step01_DataType/src/test/main/MainClass06.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9ad5b32[m
[1m--- /dev/null[m
[1m+++ b/Step01_DataType/src/test/main/MainClass06.java[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m